import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;
import java.io.IOException;

public class main {
    public static void main(String[] args) throws IOException{

	// we expect exactly one argument: the name of the input file
	if (args.length!=1) {
	    System.err.println("\n");
	    System.err.println("Simple calculator\n");
	    System.err.println("=================\n\n");
	    System.err.println("Please give as input argument a filename\n");
	    System.exit(-1);
	}
	String filename=args[0];

	// open the input file
	CharStream input = CharStreams.fromFileName(filename);
	    //new ANTLRFileStream (filename); // depricated
	
	// create a lexer/scanner
	implLexer lex = new implLexer(input);
	
	// get the stream of tokens from the scanner
	CommonTokenStream tokens = new CommonTokenStream(lex);
	
	// create a parser
	implParser parser = new implParser(tokens);
	
	// and parse anything from the grammar for "start"
	ParseTree parseTree = parser.start();

	// Construct an interpreter and run it on the parse tree
	Interpreter interpreter = new Interpreter();
	interpreter.visit(parseTree);
    }
}

// We write an interpreter that implements interface
// "implVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Double.

class Interpreter extends AbstractParseTreeVisitor<Double> implements implVisitor<Double> {

    static Environment env=new Environment();
    
    public Double visitStart(implParser.StartContext ctx){
	for(implParser.CommandContext c:ctx.cs) visit(c);
	return null;
    };

    public Double visitSingleCommand(implParser.SingleCommandContext ctx){
	return visit(ctx.c);
    }

    public Double visitMultipleCommands(implParser.MultipleCommandsContext ctx){
	for(implParser.CommandContext c:ctx.cs) visit(c);
	return null;
    }
    
    public Double visitAssignment(implParser.AssignmentContext ctx){
 	Double v=visit(ctx.e);
	env.setVariable(ctx.x.getText(),v);
	return null;
    }
    
    public Double visitOutput(implParser.OutputContext ctx){
	Double v=visit(ctx.e);
	System.out.println(v);
	return null;
    }

    public Double visitWhileLoop(implParser.WhileLoopContext ctx){
	while(visit(ctx.c).equals(1.0)){
	    visit(ctx.p);
	}
	return null;
    }

	@Override
	public Double visitArrayAssignment(implParser.ArrayAssignmentContext ctx) {
    	Double left = visit(ctx.expr(0));
    	Double right = visit(ctx.expr(1));
    	env.setVariable(ctx.x.getText()+"#"+left.toString(), right);
		return null;
	}

	@Override
	public Double visitArrayGET(implParser.ArrayGETContext ctx) {
    	Double value = visit(ctx.expr());
		return env.getVariable(ctx.x.getText()+"#"+value.toString());
	}

	@Override
	public Double visitForLoop(implParser.ForLoopContext ctx) {
    	Double min = visit(ctx.min);
    	Double max = visit(ctx.max);
		for (double i = min; i<max; i++){
			visit(ctx.p);
		}
		return null;
    }

	@Override
	public Double visitIfStatment(implParser.IfStatmentContext ctx) {
		if(visit(ctx.c).equals(1.0)){
			visit(ctx.p);
		}return null;
	}

	@Override
	public Double visitIfElseStatment(implParser.IfElseStatmentContext ctx) {
		if(visit(ctx.c).equals(1.0)){
			visit(ctx.p1);
		}else visit(ctx.p2);
		return null;
	}



	/////////////////////////////////////////////////////
	@Override
	public Double visitAND(implParser.ANDContext ctx) {
    	Double left = visit(ctx.condition(0));
		Double right = visit(ctx.condition(1));
		if (left.equals(1.0) && right.equals(1.0)){
			return 1.0;
		}else return 0.0;
	}

	@Override
	public Double visitOR(implParser.ORContext ctx) {
		Double left = visit(ctx.condition(0));
		Double right = visit(ctx.condition(1));
		if (left.equals(1.0) || right.equals(1.0)){
			return 1.0;
		}else return 0.0;
    }


	public Double visitParenthesis(implParser.ParenthesisContext ctx){
	return visit(ctx.e);
    };
    
    public Double visitVariable(implParser.VariableContext ctx){
	return env.getVariable(ctx.x.getText());
    };
    

    public Double visitConstant(implParser.ConstantContext ctx){
	return Double.parseDouble(ctx.c.getText());
	};
	
	public Double visitPOWER(implParser.POWERContext ctx){
		double dw = Math.pow(visit(ctx.e1), visit(ctx.e2));
		return dw;
	};

	public Double visitSQRT(implParser.SQRTContext ctx){
		double sq = Math.sqrt(visit(ctx.expr()));
		return sq;
	};


	
	public Double visitPARENTHESES(implParser.PARENTHESESContext ctx){
		return visit(ctx.e);
	};

	
	public Double visitNUMBER(implParser.NUMBERContext ctx){
		return Double.parseDouble(ctx.c.getText());
	};

	
	public Double visitMULTI_DEVI(implParser.MULTI_DEVIContext ctx){
		if((ctx.op.getText().equals("*"))){
			return visit(ctx.e1) * visit(ctx.e2);
		} else return visit(ctx.e1) / visit(ctx.e2);
	};

	public Double visitMOD(implParser.MODContext ctx){
		double mod = visit(ctx.e1) % visit(ctx.e2);
		return mod;
	};

	
	public Double visitADD_SUB(implParser.ADD_SUBContext ctx){
		if(ctx.op.getText().equals("+"))
			return visit(ctx.e1) + visit(ctx.e2);
		 else return visit(ctx.e1) - visit(ctx.e2);
	};

	public Double visitMinus(implParser.MinusContext ctx){
		if (ctx.op.getText().equals("+"))
			return visit(ctx.e);
		else
			return -visit(ctx.e);
		};


    public Double visitUnequal(implParser.UnequalContext ctx){
		Double left = visit(ctx.expr(0));
		Double right = visit(ctx.expr(1));
		if (left.equals(right))  return 0.0;
	else return 1.0;
	}
	
    public Double visitEqual(implParser.EqualContext ctx){
		Double left = visit(ctx.expr(0));
		Double right = visit(ctx.expr(1));
		if (left.equals(right))  return 1.0;
		else return 0.0;
	}

    public Double visitLessThan(implParser.LessThanContext ctx){
		Double left = visit(ctx.expr(0));
		Double right = visit(ctx.expr(1));
		if (left <= right)  return 1.0;
		else return 0.0;
	}

    public Double visitLess(implParser.LessContext ctx){
		Double left = visit(ctx.expr(0));
		Double right = visit(ctx.expr(1));
		if (left < right)  return 1.0;
		else return 0.0;
	}

    public Double visitGreaterThan(implParser.GreaterThanContext ctx){
		Double left = visit(ctx.expr(0));
		Double right = visit(ctx.expr(1));
		if (left >= right)  return 1.0;
		else return 0.0;
	}

    public Double visitGreater(implParser.GreaterContext ctx){
		Double left = visit(ctx.expr(0));
		Double right = visit(ctx.expr(1));
		if (left > right)  return 1.0;
		else return 0.0;
	}


}

